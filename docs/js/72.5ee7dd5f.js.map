{"version":3,"file":"js/72.5ee7dd5f.js","mappings":"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","sources":["webpack://vue/./node_modules/@emailjs/browser/es/store/store.js","webpack://vue/./node_modules/@emailjs/browser/es/methods/init/init.js","webpack://vue/./node_modules/@emailjs/browser/es/utils/validateParams.js","webpack://vue/./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","webpack://vue/./node_modules/@emailjs/browser/es/api/sendPost.js","webpack://vue/./node_modules/@emailjs/browser/es/methods/send/send.js","webpack://vue/./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","webpack://vue/./node_modules/@emailjs/browser/es/index.js","webpack://vue/./src/views/Contact.vue","webpack://vue/./src/views/Contact.vue?743e"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.10.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.10.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","<template>\n  <div class=\"contact\">\n    <div class=\"container contact__container\" v-contact-directive>\n      <div class=\"contact__title__wrapper\">\n        <div class=\"title\">Contact Me</div>\n      </div>\n      <form class=\"contact__form\" v-on:submit.prevent=\"submitForm\">\n        <input\n          class=\"contact__form__input\"\n          type=\"text\"\n          v-model=\"name\"\n          name=\"clientName\"\n          placeholder=\"name\"\n          @input=\"name = $event.target.value\"\n        />\n        <div class=\"contact__form__input__error\" v-if=\"nameErorr\">please provide a valid name</div>\n        <input\n          class=\"contact__form__input\"\n          type=\"email\"\n          v-model=\"email\"\n          dirname=\"clientMail\"\n          placeholder=\"email\"\n          @input=\"email = $event.target.value\"\n        />\n        <div class=\"contact__form__input__error\" v-if=\"emailErorr\">please provid a valid email</div>\n        <input\n          class=\"contact__form__input\"\n          type=\"text\"\n          v-model=\"message\"\n          placeholder=\"message\"\n          @input=\"message = $event.target.value\"\n        />\n        <button class=\"link link--helike contact__form__submit\" type=\"submit\">Send</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport emailjs from '@emailjs/browser'\nimport { tl } from '../utils/timeline'\nimport Split from '../utils/split'\nimport { ref, watch } from 'vue'\n\nconst emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n\nlet nameErorr = ref(false)\nlet emailErorr = ref(false)\nlet messageError = ref(false)\n\nconst name = ref('')\nconst email = ref('')\nconst message = ref('')\n\nconst vContactDirective = {\n  mounted: () => {\n    emailjs.init(import.meta.env.VITE_SERVICE_ID)\n  },\n  created: (el) => {\n    const form = el.querySelector('.contact__form')\n    const title = el.querySelector('.contact__title__wrapper .title')\n    const inputs = el.querySelectorAll('.contact__form__input')\n    const submitBtn = el.querySelectorAll('.contact__form__submit')\n    const titleLetters = Split(title)\n    const titleLett = el.querySelectorAll('.contact__title__wrapper .title .char')\n\n    tl.to(titleLett, { y: 0, opacity: 1, stagger: 0.1 })\n    tl.to(form, { y: 0, opacity: 1 }, '<0.9')\n    tl.to(inputs, { opacity: 1, stagger: 0.2 }, '<0.2')\n    tl.to(submitBtn, { opacity: 1 }, '<0.6')\n  }\n}\n\nconst submitForm = (e) => {\n  e.preventDefault()\n  let formData = new FormData()\n\n  formData.append('service_id', import.meta.env.VITE_SERVICE_ID)\n  formData.append('template_id', 'template_nel837d')\n  formData.append('user_id', import.meta.env.VITE_PUBLIC_KEY)\n  formData.append('from_name', name.value)\n  formData.append('email', email.value)\n  formData.append('message', message.value)\n\n  if (name.value && email.value && message.value) {\n    return true\n  }\n\n  if (!name.value || name.value.length < 3) {\n    nameErorr.value = true\n  } else {\n    nameErorr.value = false\n  }\n  if (!email.value || !emailRegex.test(email.value)) {\n    emailErorr.value = true\n  } else {\n    emailErorr.value = false\n  }\n\n  if (!nameErorr.value && !emailErorr.value) {\n    fetch('https://api.emailjs.com/api/v1.0/email/send-form', {\n      method: 'POST',\n      body: formData\n    })\n      .then(function (res) {\n        console.log(res)\n      })\n      .catch(function (res) {\n        console.log(res)\n      })\n  } else {\n    console.log([''])\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.contact {\n  min-height: 80vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &__title__wrapper {\n    width: 100%;\n    text-align: center;\n    font-size: clamp(1rem, 12vw + 0.4rem, 5rem);\n    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);\n\n    & .char {\n      transform: translateY(300px);\n    }\n  }\n\n  &__container {\n    position: relative;\n    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);\n  }\n\n  &__form {\n    display: flex;\n    flex-wrap: wrap;\n    transform: translateY(100%);\n\n    &__input {\n      width: 100%;\n      margin: 0.5rem 0;\n      background: transparent;\n      border: 0;\n      border-bottom: 1px solid;\n      padding: 1rem 0.8em;\n      text-align: start;\n      font-size: 20px;\n      font-family: inherit;\n      line-height: 1.4;\n      color: inherit;\n      outline: none;\n      opacity: 0;\n\n      &::placeholder {\n        padding-left: 3px;\n        text-transform: capitalize;\n        color: $gray;\n      }\n\n      &__error {\n        color: red;\n      }\n    }\n\n    &__submit {\n      width: fit-content;\n      margin: 1.2rem auto;\n      font-weight: bold;\n      background: none;\n      border: none;\n      text-align: center;\n      border-bottom: 1px solid $primary;\n      opacity: 0;\n    }\n  }\n}\n</style>\n","import script from \"./Contact.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Contact.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Contact.vue?vue&type=style&index=0&id=70d58574&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","_origin","init","publicKey","origin","_userID","validateParams","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","findHTMLForm","form","currentForm","document","querySelector","nodeName","sendForm","formData","FormData","append","emailRegex","nameErorr","ref","emailErorr","name","email","message","vContactDirective","mounted","emailjs","import","created","el","title","inputs","querySelectorAll","submitBtn","titleLett","Split","tl","y","opacity","stagger","submitForm","e","preventDefault","value","length","test","console","log","fetch","method","body","then","res","catch","__exports__"],"sourceRoot":""}